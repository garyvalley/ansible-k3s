---
- name: Add the ubuntu user to the sudoers
  copy:
    dest: "/etc/sudoers.d/ubuntu"
    content: "ubuntu ALL=(ALL) NOPASSWD: ALL"

- name: Deploy the SSH key
  authorized_key: user=ubuntu
                  key="{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
                  state=present

- name: Disable password authentication
  lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: '^PasswordAuthentication'
    line: "PasswordAuthentication no"
    state: present
    backup: true
  notify:
    - restart ssh

- name: Disable root login
  lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: '^PermitRootLogin'
    line: "PermitRootLogin no"
    state: present
    backup: true
  notify:
    - restart ssh

- name: Set the hostname
  hostname:
    name: "{{ inventory_hostname }}"

- name: Ensure that the loopback is named
  replace:
    dest: /etc/hosts
    regexp: localhost
    replace: '{{ inventory_hostname }}'
    backup: yes

- name: Add the inventory to /etc/hosts
  lineinfile:
    dest: /etc/hosts
    regexp: '.*{{ item }}$'
    line: "{{ hostvars[item]['ansible_host'] }} {{ item }}"
    state: present
  with_items:
    - "{{ groups['all'] }}"

- name: Ensure prerequisite packages exist
  apt:
    name: "{{ install_packages }}"
    state: present
    update_cache: true

    #- name: Unmount all the snaps
    #mount:
    #path: "{{ snap_mounts }}"
    #state: unmounted

    #- name: Ensure certain packages don't exist
    #apt:
    #name: "{{ remove_packages }}"
    #state: absent
    #update_cache: true

- name: GPU config to 16MB
  lineinfile:
    path: /boot/firmware/config.txt
    line: gpu_mem=16

- name: Remove the swapfile from /etc/fstab
  mount:
    name: [swap, none]
    fstype: swap
    state: absent

- name: Disable swap
  command: swapoff -a
  when: ansible_swaptotal_mb > 0
  
- name: Set swapiness to zero
  lineinfile:
    path: /etc/sysctl.conf
    line: vm.swapiness=0

- name: Stop ntpd service
  service:
    name: ntp
    state: stopped

- name: Start ntpd service
  service:
    name: ntp
    state: restarted
    enabled: true

- name: Make sure the nobtcmd.txt file exists
  stat:
    path: "{{ nobtcmd_file }}"
  register: nobtcmd

- name: Make sure the file exists
  file:
    path: "{{ nobtcmd_file }}"
    state: touch
    mode: u=rwx,g=rx,o=rx
  when: not nobtcmd.stat.exists

- name: Test for the cgroup updates 
  command: "grep 'cgroup_enable=memory' {{ nobtcmd_file }}"
  register: cgroup_group
  ignore_errors: true

- name: Set Kernel features for the RPIs 
  lineinfile:
    path: "{{ nobtcmd_file }}"
    backrefs: true
    state: present
    regexp: '(.*)$'
    line: '\1 cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory'
  when: cgroup_group.rc == 1

- name: Make sure the file exists
  file:
    path: "{{ cmdline_file }}"
    state: touch
    mode: u=rwx,g=rx,o=rx

- name: Test for the cgroup updates 
  command: "grep 'cgroup_enable=memory' {{ cmdline_file }}"
  register: cgroup_group2
  ignore_errors: true

- name: Set Kernel features for the RPIs 
  lineinfile:
    path: "{{ cmdline_file }}"
    backrefs: true
    state: present
    regexp: '(.*)$'
    line: '\1 cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory'
  when: cgroup_group2.rc == 1

- name: Reboot the system -- RPIs are slow so wait a bit
  reboot:
    reboot_timeout: 300
